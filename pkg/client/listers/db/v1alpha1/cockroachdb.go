/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.smartmachine.io/crdb-operator/pkg/apis/db/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CockroachDBLister helps list CockroachDBs.
type CockroachDBLister interface {
	// List lists all CockroachDBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CockroachDB, err error)
	// CockroachDBs returns an object that can list and get CockroachDBs.
	CockroachDBs(namespace string) CockroachDBNamespaceLister
	CockroachDBListerExpansion
}

// cockroachDBLister implements the CockroachDBLister interface.
type cockroachDBLister struct {
	indexer cache.Indexer
}

// NewCockroachDBLister returns a new CockroachDBLister.
func NewCockroachDBLister(indexer cache.Indexer) CockroachDBLister {
	return &cockroachDBLister{indexer: indexer}
}

// List lists all CockroachDBs in the indexer.
func (s *cockroachDBLister) List(selector labels.Selector) (ret []*v1alpha1.CockroachDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CockroachDB))
	})
	return ret, err
}

// CockroachDBs returns an object that can list and get CockroachDBs.
func (s *cockroachDBLister) CockroachDBs(namespace string) CockroachDBNamespaceLister {
	return cockroachDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CockroachDBNamespaceLister helps list and get CockroachDBs.
type CockroachDBNamespaceLister interface {
	// List lists all CockroachDBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CockroachDB, err error)
	// Get retrieves the CockroachDB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CockroachDB, error)
	CockroachDBNamespaceListerExpansion
}

// cockroachDBNamespaceLister implements the CockroachDBNamespaceLister
// interface.
type cockroachDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CockroachDBs in the indexer for a given namespace.
func (s cockroachDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CockroachDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CockroachDB))
	})
	return ret, err
}

// Get retrieves the CockroachDB from the indexer for a given namespace and name.
func (s cockroachDBNamespaceLister) Get(name string) (*v1alpha1.CockroachDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cockroachdb"), name)
	}
	return obj.(*v1alpha1.CockroachDB), nil
}
